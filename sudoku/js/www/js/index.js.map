{"version":3,"sources":["webpack:///webpack/bootstrap 0ed3a95b14cffd1ee364","webpack:///./js/index.js","webpack:///./js/core/toolkit.js","webpack:///./js/ui/grid.js","webpack:///./js/core/generator.js","webpack:///./js/core/sudoku.js","webpack:///./js/core/checker.js","webpack:///./js/ui/popupnumbers.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC,C;;;;;;ACtBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAe,EAAE;AACjB;AACA;AACA;AACA,wBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL,8BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,WAAW;AAC1B;AACA,qBAAoB,IAAI;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD;AAChD;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,MAAM;AACnC,wCAAuC,QAAQ;AAC/C,UAAS;AACT;AACA;AACA;AACA;AACA,wEAAuE;AACvE;AACA;AACA,UAAS;AACT;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAoE;AACpE;AACA,kBAAiB,KAAK;AACtB;AACA;AACA,cAAa;AACb,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,sB;;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAsB,IAAI;AAC1B;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2B;;;;;;AC5DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD;AACjD,UAAS;AACT;AACA,E;;;;;;AClBA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,cAAc;AACjC,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B,WAAW;AACtC;AACA;AACA,gCAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,YAAY;AACzC;AACA,kCAAiC,WAAW;AAC5C;AACA;AACA;AACA,kCAAiC,wBAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,aAAa;AAC1C;AACA;AACA,mCAAkC,YAAY;AAC9C;AACA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gE;;;;;;ACvJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa,iCAAiC;AAC9C;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,gBAAe,UAAU;AACzB;AACA,qBAAoB,KAAK;AACzB,oBAAmB,IAAI;AACvB,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+B","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0ed3a95b14cffd1ee364","const Toolkit = require(\"./core/toolkit\")\r\nconst Grid = require(\"./ui/grid\")\r\nconst PopupNumbers = require(\"./ui/popupnumbers\")\r\nconst grid = new Grid($(\"#container\"));\r\ngrid.build();\r\ngrid.layout();\r\n\r\nconst popupNumbers = new PopupNumbers($(\"#popupNumbers\"));\r\ngrid.bindPopup(popupNumbers);\r\n$(\"#check\").on(\"click\",e=>{\r\n    if(grid.check()){\r\n        alert(\"恭喜！解谜成功！\")\r\n    }\r\n})\r\n$(\"#reset\").on(\"click\",e=>{\r\n    grid.reset();\r\n})\r\n$(\"#clear\").on(\"click\",e=>{\r\n    grid.clear();\r\n})\r\n$(\"#rebuild\").on(\"click\",e=>{\r\n    grid.rebuild();\r\n})\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","/**\r\n * 矩阵和数组相关的工具\r\n */\r\nconst matrixToolkit  = {\r\n    makeRow(v = 0){\r\n        const array = new Array(9)\r\n        array.fill(v)\r\n        return array\r\n    },\r\n    makeMatrix(v = 0) {\r\n        //Array.from第一个参数是数组长度等参数，第二个参数是一个map函数，用来对数组中的每个元素进行处理。\r\n        return Array.from({length:9},()=>this.makeRow(v))\r\n        // [ [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]\r\n        // const array = new Array(9)\r\n        // array.fill(makeRow(v))//makeRow只运行了一次，然后把它的数据复制到了每一行。\r\n        // return array\r\n        // [ [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ],\r\n        //   [ 0, 2, 0, 0, 0, 0, 0, 0, 0 ] ]\r\n    },\r\n    // const a = makeMatrix()\r\n    // a[0][1]=2\r\n    // console.log(a)\r\n    /**\r\n     * fisher-yates 洗牌算法\r\n     * @param {*} array \r\n     */\r\n    shuffle(array){\r\n        const endIndex = array.length - 1\r\n        for (let i = 0;i <=endIndex;i++){\r\n            //从当前位置之后（包括当前位置）随机取一个值进行交换。\r\n            const j = i + Math.floor(Math.random() * (array.length - i));\r\n            //es6解构赋值\r\n            [array[i], array[j]] = [array[j], array[i]]\r\n        }\r\n        return array\r\n    },\r\n    \r\n    // const a = Array.from({length:9},(v,i)=>i)\r\n    // console.log(a)\r\n    // console.log(shuffle(a))\r\n    // [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]\r\n    // [ 0, 7, 6, 4, 3, 5, 2, 8, 1 ]\r\n    /**\r\n     * 检查指定位置可以填写数字 n\r\n     */\r\n    checkFillable(matrix, n, rowIndex, colIndex){\r\n        const row = matrix[rowIndex];\r\n        const column = this.makeRow().map((v,i)=>matrix[i][colIndex]);\r\n        const { boxIndex } = boxToolkit.converToBoxIndex(rowIndex, colIndex);\r\n        const box = boxToolkit.getBoxCells(matrix, boxIndex);\r\n        for(let i=0;i<9;i++){\r\n            if(row[i] === n || column[i] ===n || box[i] === n){\r\n                return false;\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n};\r\n/**\r\n * 宫坐标系的工具\r\n */\r\nconst boxToolkit = {\r\n    getBoxCells(matrix, boxIndex){\r\n        const startRowIndex = Math.floor(boxIndex/3)*3;\r\n        const startColIndex = boxIndex % 3 * 3;\r\n        const result = [];\r\n        for(let cellIndex = 0; cellIndex< 9;cellIndex ++){\r\n            const rowIndex =startRowIndex +Math.floor(cellIndex/3);\r\n            const colIndex =startColIndex + cellIndex %3;\r\n            result.push(matrix[rowIndex][colIndex]);\r\n        }\r\n        return result;\r\n\r\n    },\r\n    converToBoxIndex(rowIndex, colIndex){\r\n        return {\r\n            boxIndex: Math.floor(rowIndex / 3)*3+Math.floor(colIndex/3),\r\n            cellIndex: rowIndex % 3 *3 + colIndex % 3\r\n        }\r\n    },\r\n    convertFromBoxIndex(boxIndex, cellIndex){\r\n        return {\r\n            rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n            colIndex: boxIndex % 3 * 3 + cellIndex % 3\r\n        }\r\n    }\r\n}\r\n\r\n//工具集\r\n\r\n\r\nmodule.exports = class Toolkit {\r\n    /**\r\n     * 矩阵和数组相关的工具\r\n     */\r\n    static get matrix(){\r\n        return matrixToolkit \r\n    }\r\n    /**\r\n     * 宫坐标系相关的工具\r\n     */\r\n    static get box(){\r\n        return boxToolkit\r\n    }\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/toolkit.js\n// module id = 1\n// module chunks = 0","//生成九宫格\r\nconst Toolkit = require(\"../core/toolkit\")\r\nconst Generator = require(\"../core/generator\")\r\nconst Sudoku = require(\"../core/sudoku\")\r\nconst Checker = require(\"../core/checker\")\r\nclass Grid {\r\n    constructor(container){\r\n        this._$container = container;\r\n    }\r\n\r\n    build(){\r\n        // 生成解决方案\r\n        // const generator = new Generator();\r\n        // generator.generate();\r\n        // const matrix = generator.matrix;\r\n        const sudoku = new Sudoku();\r\n        sudoku.make();\r\n        // const matrix = sudoku.solutionMatrix;//完成的解决方案\r\n        console.log(\"答案：\",sudoku.solutionMatrix)\r\n        const matrix = sudoku.puzzleMatrix;//挖空后的解决方案\r\n        const rowGroupClasses = [\"row_g_top\",\"row_g_middle\",\"row_g_bottom\"];\r\n        const colGroupClasses = [\"col_g_left\",\"col_g_center\",\"col_g_right\"];\r\n        const $cells = matrix.map(rowValues => rowValues.map((cellValue,colIndex)=>{\r\n            return $(\"<span>\")\r\n            .addClass(colGroupClasses[colIndex % 3])\r\n            .addClass(cellValue ? \"fixed\" : \"empty\")\r\n            .text(cellValue)\r\n        }))\r\n        const $divArray = $cells.map(($spanArray,rowIndex) =>{\r\n            return $(\"<div />\")\r\n            .addClass(\"row\")\r\n            .addClass(rowGroupClasses[rowIndex % 3])\r\n            .append($spanArray)\r\n        })\r\n        this._$container.append($divArray)\r\n    }\r\n    layout(){\r\n        const width = $(\"span:first\", this._$container).width();\r\n        $(\"span\", this._$container)\r\n        .height(width)\r\n        .css({\r\n            \"line-height\":`${width}px`,\r\n            \"font-size\": width <32 ?`${width/2}px`:\"\"\r\n        })\r\n    }\r\n    //检查用户解谜的结果，成功则进行提示，失败显示错误位置的标记\r\n    check(){\r\n        //从界面获取要检查的数据。\r\n        const data = this._$container.children().map((rowIndex,div) =>{//这是jquery的map不是es6的map\r\n            return $(div).children()\r\n            .map((colIndex,span)=>parseInt($(span).text())||0);\r\n        })\r\n        .toArray()//对外层的转换\r\n        .map($data => $data.toArray());//对内层的转换\r\n        // console.log('获取页面数据',data)\r\n        const checker = new Checker(data);\r\n        if(checker.check()){\r\n            return true;\r\n        }\r\n        //检查不成功，进行标记\r\n        const marks = checker.matrixMarks;\r\n        this._$container.children()\r\n        .each((rowIndex,div)=>{\r\n            $(div).children().each((colIndex,span)=>{\r\n                const $span = $(span);\r\n                if($span.is(\".fixed\") || marks[rowIndex][colIndex]){//如果是fixed或者标记true，则删除error\r\n                    $span.removeClass(\"error\")\r\n                }else{//否则加入error\r\n                    $span.addClass(\"error\");\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    // 充值当前迷盘到初始状态\r\n    reset(){\r\n        this._$container.find(\"span:not(.fixed)\")\r\n        .removeClass(\"error mark1 mark2\")\r\n        .addClass(\"empty\")\r\n        .text(0)\r\n    }\r\n    // 清理错误标记\r\n    clear(){\r\n        this._$container.find(\"span.error\")\r\n        .removeClass(\"error\")\r\n    }\r\n    // 开始新的一局\r\n    rebuild(){\r\n        this._$container.empty();\r\n        this.build();\r\n        this.layout();\r\n    }\r\n    bindPopup(popupNumbers){\r\n        this._$container.on(\"click\",\"span\",e=>{\r\n            const $cell = $(e.target);\r\n            if($cell.is(\".fixed\")){//如果是fixed不让用户点击\r\n                return;\r\n            }\r\n            popupNumbers.popup($cell);\r\n        })\r\n    }\r\n}\r\nmodule.exports = Grid\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/grid.js\n// module id = 2\n// module chunks = 0","//生成数独解决方案\r\nconst Toolkit = require(\"./toolkit\")\r\nclass Generator{\r\n    generate(){\r\n        while(!this.internalGenerate()){\r\n            console.warn(\"try again\")\r\n        }\r\n    }\r\n    internalGenerate(){\r\n        this.matrix = Toolkit.matrix.makeMatrix();\r\n        this.orders = Toolkit.matrix.makeMatrix()\r\n        .map(row=>row.map((v,i) => i))//生成0-8\r\n        .map(row => Toolkit.matrix.shuffle(row))//把每一行进行洗牌算法打乱顺序\r\n\r\n        // Toolkit.matrix.makeRow()\r\n        // every()\r\n        for(let n=1;n<=9;n++){\r\n           if(!this.fillNumber(n)){\r\n               return false;\r\n           }\r\n        }\r\n        return true;\r\n    }\r\n    fillNumber(n){\r\n        return this.fillRow(n,0);\r\n    }\r\n    fillRow(n,rowIndex){\r\n        if(rowIndex>8){//超过第8行说明已经填写结束。\r\n            return true;\r\n        }\r\n        const row = this.matrix[rowIndex];\r\n        //随机选择列\r\n        const orders = this.orders[rowIndex];\r\n        for(let i = 0;i<9;i++){\r\n            const colIndex = orders[i];\r\n            if(row[colIndex]){//如果已经填过了，如果不是0。则跳过。\r\n                continue\r\n            }\r\n            // 检查这个位置是否可以填 n\r\n            if(!Toolkit.matrix.checkFillable(this.matrix, n, rowIndex, colIndex)){\r\n                continue;\r\n            }\r\n            row[colIndex] = n;\r\n            // 当前行填写 n 成功，递归调用 fillRow() 来在下一行中填写n\r\n            //去下一行填写n，如果没填进去，就继续当前行下一个可以填写的位置\r\n            if(!this.fillRow(n,rowIndex+1)){\r\n                row[colIndex]=0\r\n                continue\r\n            }\r\n            //完成填写\r\n            return true;\r\n        }\r\n        //填写失败\r\n        return false\r\n    }\r\n}\r\n\r\n// const generator =new Generator();\r\n// generator.generate();\r\n// console.log(generator.matrix);\r\nmodule.exports = Generator\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generator.js\n// module id = 3\n// module chunks = 0","//生成数独游戏\r\n// 1.生成完成的解决方案：Generator\r\n// 2.随机去除部分数据：按比例\r\n\r\nconst Generator = require(\"./generator\");\r\nmodule.exports = class Sudoku {\r\n    constructor(){\r\n        // 生成完成的解决方案\r\n        const generator = new Generator();\r\n        generator.generate();\r\n        this.solutionMatrix = generator.matrix;\r\n    }\r\n    make(level = 5){\r\n        // const shouldRid = Math.random()*9 <level\r\n        this.puzzleMatrix = this.solutionMatrix.map(row=>row.map(cell=>{\r\n            return Math.random()*9 <level?0:cell;//九分之五的概率返回0\r\n        }))\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/sudoku.js\n// module id = 4\n// module chunks = 0","//检查数据解决方案\r\n\r\nfunction checkArray(array) {\r\n    const length = array.length;\r\n    const marks = new Array(length);\r\n    marks.fill(true);\r\n    for (let i = 0; i < length-1; i++) {\r\n        if(!marks[i]){//如果这个位置已经检查过了是false，就不用检查直接跳过。\r\n            continue\r\n        }\r\n        const v = array[i];\r\n        // 是否有效，0 - 无效，1~9有效\r\n        if(!v){\r\n            marks[i] = false;\r\n            continue;\r\n        }\r\n        // 是否有重复： i+1 ~ 9，是否和i位置的数据重复\r\n        for(let j=i+1;j<length;j++){\r\n            if(v===array[j]){\r\n                marks[i]=marks[j]=false;\r\n            }\r\n        }\r\n    }\r\n    return marks;\r\n}\r\n// console.log(checkArray([1,2,3,4,5,6,7,8,9]))\r\n// console.log(checkArray([1,2,3,4,0,6,7,8,9]))\r\n// console.log(checkArray([1,2,3,4,0,6,2,2,9]))\r\nconst Toolkit = require(\"./toolkit\")\r\n// 输入：matrix，用户完成呢过的数独数据，9x9\r\n// 处理：对matrix行、列、宫进行检查，并填写marks\r\n// 输出：检查是否成功、marks对应位置中的值是false是错误，true是正确。\r\nclass Checker {\r\n    constructor(matrix){\r\n        this._matrix = matrix;\r\n        this._matrixMarks  = Toolkit.matrix.makeMatrix(true);\r\n    }\r\n    get matrixMarks(){\r\n        return this._matrixMarks;\r\n    }\r\n    get isSuccess(){\r\n        return this._success;\r\n    }\r\n    check(){\r\n        this.checkRows();\r\n        this.checkCols();\r\n        this.checkBoxes();\r\n\r\n        // 检查是否成功\r\n        // Array.prototype.every()对数组的每个元素进行检查返回true或者false，所有元素都是true才返回true，如果任意一个地方是false就返回false\r\n        this._success = this._matrixMarks.every(row=>row.every(mark=>mark))//所有行都返回true，所有行里面的所有元素都返回true。\r\n        return this._success\r\n\r\n    }\r\n    checkRows(){\r\n        for(let rowIndex=0;rowIndex<9;rowIndex++){\r\n            const row = this._matrix[rowIndex];\r\n            const marks = checkArray(row);\r\n            for(let colIndex=0;colIndex<marks.length;colIndex++){\r\n                if(!marks[colIndex]){\r\n                    this._matrixMarks[rowIndex][colIndex] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    checkCols(){\r\n        for(let colIndex = 0; colIndex<9;colIndex++){\r\n            const cols = [];\r\n            for(let rowIndex = 0;rowIndex<9;rowIndex++){\r\n                cols[rowIndex] = this._matrix[rowIndex][colIndex];\r\n            }\r\n            const marks = checkArray(cols);\r\n            for(let rowIndex = 0;rowIndex < marks.length; rowIndex++){\r\n                if(!marks[rowIndex]){\r\n                    this._matrixMarks[rowIndex][colIndex] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    checkBoxes(){\r\n        for(let boxIndex = 0;boxIndex < 9;boxIndex++){\r\n            const boxes = Toolkit.box.getBoxCells(this._matrix,boxIndex);\r\n            const marks = checkArray(boxes);\r\n            for(let cellIndex = 0;cellIndex<9;cellIndex++){\r\n                if(!marks[cellIndex]){\r\n                    const {rowIndex,colIndex}=Toolkit.box.convertFromBoxIndex(boxIndex,cellIndex);\r\n                    this._matrixMarks[rowIndex][colIndex] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nmodule.exports = Checker;\r\n\r\n// const Generator = require(\"./generator\")\r\n// const gen = new Generator();\r\n// gen.generate();\r\n// const matrix = gen.matrix;\r\n// console.log(\"gen matrix\");\r\n// console.log(matrix)\r\n// const checker = new Checker(matrix);\r\n// console.log(\"check result1111111111\",checker.check())\r\n// console.log(checker.matrixMarks);\r\n\r\n// matrix[1][1] = 0;\r\n// matrix[2][3] = matrix[3][5] = 5;\r\n// console.log(\"gen matrix\");\r\n// console.log(matrix)\r\n// const checker2 = new Checker(matrix);\r\n// console.log(\"check result2222222222\",checker2.check());\r\n// console.log(checker2.matrixMarks);\r\n// gen matrix\r\n// [ [ 1, 7, 8, 3, 6, 5, 4, 2, 9 ],\r\n//   [ 5, 2, 3, 7, 9, 4, 8, 1, 6 ],\r\n//   [ 6, 4, 9, 1, 8, 2, 7, 5, 3 ],\r\n//   [ 7, 9, 1, 2, 5, 8, 6, 3, 4 ],\r\n//   [ 8, 3, 5, 4, 1, 6, 2, 9, 7 ],\r\n//   [ 4, 6, 2, 9, 7, 3, 5, 8, 1 ],\r\n//   [ 9, 8, 4, 5, 3, 7, 1, 6, 2 ],\r\n//   [ 2, 1, 6, 8, 4, 9, 3, 7, 5 ],\r\n//   [ 3, 5, 7, 6, 2, 1, 9, 4, 8 ] ]\r\n// check result1111111111 true\r\n// [ [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ] ]\r\n// gen matrix\r\n// [ [ 1, 7, 8, 3, 6, 5, 4, 2, 9 ],\r\n//   [ 5, 0, 3, 7, 9, 4, 8, 1, 6 ],\r\n//   [ 6, 4, 9, 5, 8, 2, 7, 5, 3 ],\r\n//   [ 7, 9, 1, 2, 5, 5, 6, 3, 4 ],\r\n//   [ 8, 3, 5, 4, 1, 6, 2, 9, 7 ],\r\n//   [ 4, 6, 2, 9, 7, 3, 5, 8, 1 ],\r\n//   [ 9, 8, 4, 5, 3, 7, 1, 6, 2 ],\r\n//   [ 2, 1, 6, 8, 4, 9, 3, 7, 5 ],\r\n//   [ 3, 5, 7, 6, 2, 1, 9, 4, 8 ] ]\r\n// check result2222222222 false\r\n// [ [ true, true, true, true, true, false, true, true, true ],\r\n//   [ true, false, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, false, true, true, true, false, true ],\r\n//   [ true, true, true, true, false, false, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, false, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ],\r\n//   [ true, true, true, true, true, true, true, true, true ] ]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/checker.js\n// module id = 5\n// module chunks = 0","//处理弹出的操作面板\r\n// 1.点击cell弹出popup\r\n// 2.点击popup面板，得到数字n，把数字填到cell中\r\n\r\nclass PopupNumbers {\r\n    constructor($panel){\r\n        this._$panel = $panel.hide().removeClass(\"hidden\");\r\n        this._$panel.on(\"click\",\"span\",e=>{\r\n            const $cell = this._$targetCell;\r\n            const $span = $(e.target);\r\n\r\n            //mark1，mark2回填样式\r\n            if($span.hasClass(\"mark1\")){\r\n                if($cell.hasClass(\"mark1\")){\r\n                    $cell.removeClass(\"mark1\")\r\n                }else{\r\n                    $cell.removeClass(\"mark2\")\r\n                    .addClass(\"mark1\")\r\n                }\r\n            }else  if($span.hasClass(\"mark2\")){\r\n                if($cell.hasClass(\"mark2\")){\r\n                    $cell.removeClass(\"mark2\")\r\n                }else{\r\n                    $cell.removeClass(\"mark1\")\r\n                    .addClass(\"mark2\")\r\n                }\r\n            }else if($span.hasClass(\"empty\")){//empty，取消数字填写，取消mark样式\r\n                $cell.text(0)\r\n                .addClass(\"empty\");\r\n            }else{\r\n                $cell.removeClass(\"empty\")//1-9 回填数字\r\n                .text($span.text());\r\n            }\r\n            this.hide();\r\n        })\r\n    }\r\n\r\n    popup($cell){\r\n        this._$targetCell = $cell;\r\n        const {left, top} = $cell.position();\r\n        this._$panel.css({\r\n            left:`${left}px`,\r\n            top:`${top}px`,\r\n        })\r\n        .show()\r\n    }\r\n    hide(){\r\n        this._$panel.hide();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = PopupNumbers;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/popupnumbers.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}